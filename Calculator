import React, { useState } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, SafeAreaView, StatusBar } from 'react-native';

const ScientificCalculator = () => {
  const [input, setInput] = useState('');
  const [result, setResult] = useState('');

  const handleButtonPress = (value) => {
    if (value === '=') {
      try {
        const evalResult = eval(input);
        setResult(evalResult.toString());
      } catch (error) {
        setResult('Error');
      }
    } else if (value === 'C') {
      setInput('');
      setResult('');
    } else if (value === 'DEL') {
      setInput((prevInput) => prevInput.slice(0, -1));
    } else {
      setInput((prevInput) => prevInput + value);
    }
  };

  const buttons = [
    ['C', 'DEL', '%', '/'],
    ['7', '8', '9', '*'],
    ['4', '5', '6', '-'],
    ['1', '2', '3', '+'],
    ['0', '.', '^', '='],
  ];

  const scientificButtons = ['sin', 'cos', 'tan', 'log', 'sqrt'];

  const handleScientificButtonPress = (value) => {
    let calculation;
    switch (value) {
      case 'sin':
        calculation = Math.sin(eval(input));
        break;
      case 'cos':
        calculation = Math.cos(eval(input));
        break;
      case 'tan':
        calculation = Math.tan(eval(input));
        break;
      case 'log':
        calculation = Math.log10(eval(input));
        break;
      case 'sqrt':
        calculation = Math.sqrt(eval(input));
        break;
      default:
        calculation = '';
    }
    setResult(calculation.toString());
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" />
      <View style={styles.displayContainer}>
        <Text style={styles.inputText}>{input}</Text>
        <Text style={styles.resultText}>{result}</Text>
      </View>
      <View style={styles.buttonsContainer}>
        <View style={styles.scientificButtonsContainer}>
          {scientificButtons.map((item, index) => (
            <TouchableOpacity
              key={index}
              style={styles.scientificButton}
              onPress={() => handleScientificButtonPress(item)}
            >
              <Text style={styles.buttonText}>{item}</Text>
            </TouchableOpacity>
          ))}
        </View>
        <View style={styles.numberButtonsContainer}>
          {buttons.map((row, rowIndex) => (
            <View key={rowIndex} style={styles.row}>
              {row.map((item, index) => (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.button,
                    item === '=' && styles.equalsButton,
                    item === 'C' && styles.clearButton,
                    item === 'DEL' && styles.deleteButton,
                  ]}
                  onPress={() => handleButtonPress(item)}
                >
                  <Text style={styles.buttonText}>{item}</Text>
                </TouchableOpacity>
              ))}
            </View>
          ))}
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1E1E1E',
  },
  displayContainer: {
    flex: 1,
    justifyContent: 'flex-end',
    alignItems: 'flex-end',
    padding: 20,
  },
  inputText: {
    color: '#FFF',
    fontSize: 30,
  },
  resultText: {
    color: '#FFF',
    fontSize: 50,
    fontWeight: 'bold',
  },
  buttonsContainer: {
    flex: 2,
    flexDirection: 'row',
  },
  scientificButtonsContainer: {
    flex: 1,
    justifyContent: 'space-around',
    padding: 10,
  },
  numberButtonsContainer: {
    flex: 3,
  },
  row: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
  },
  button: {
    backgroundColor: '#333',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
    margin: 5,
    flex: 1,
    height: '80%',
  },
  scientificButton: {
    backgroundColor: '#555',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
    margin: 5,
    padding: 20,
  },
  equalsButton: {
    backgroundColor: '#FF9500',
  },
  clearButton: {
    backgroundColor: '#FF3B30',
  },
  deleteButton: {
    backgroundColor: '#FFCC00',
  },
  buttonText: {
    color: '#FFF',
    fontSize: 24,
    fontWeight: 'bold',
  },
});

export default ScientificCalculator;
